package RESTORAAN;

import java.util.*;



class Restourant{
   Stol [] stoli;

   public Restourant(int[] a){  // Конструктор ресторана для создания массива столов
      stoli = new Stol[a.length]; // Инициализируем массив столов
      for(int i=0;i<a.length;i++){
         stoli[i]=new Stol(a[i],i+1);  // Создаем каждый стол с вместимостью и номером
      }
   }

   public void seatOne(int num){ // Метод для посадки одного гостя за стол с номером num
      if(num<=0 || stoli.length<num || stoli[num-1].getNotfree()){
         System.out.println("Не удалось посадить гостя за стол " + num + ". Стол занят или номер вне диапазона.");; // Стол занят или номер стола вне диапазона
      }
      else{
         stoli[num-1].zanat();// Сажаем одного гостя за стол
         System.out.println("Гость успешно посажен за стол " + num + ".");
      }
   }

   public void seatCompany(int num, int k){ // Метод для посадки компании из k человек за стол с номером num
      if(num<=0 || stoli.length<num || stoli[num-1].getNotfree() || stoli[num-1].getVmestimost()<k){
         System.out.println("Не удалось посадить компанию за стол " + num + ". Стол занят или вместимость недостаточна."); // Стол занят или номер стола вне диапазона
      }
      else{
         stoli[num-1].zanat();// Сажаем одного гостя за стол
         System.out.println("Компания из " + k + " человек успешно посажена за стол " + num + ".");
      }
   }

   public void seatCompanyFirstStol(int k) {  // Метод для посадки компании за первый подходящий стол с вместимостью не меньше k (тк k человек)
      int a=0; // Флаг
      for (int i = 0; i < stoli.length; i++) {
         if (! stoli[i].getNotfree() && stoli[i].getVmestimost() >= k) {
            stoli[i].zanat(); // Сажаем компанию за первый подходящий стол
            System.out.println("Компания из " + k + " человек успешно посажена за первый подходящий стол " + (i + 1) + ".");
            a++;
            break;
         }
      }
      if (a==0) {
         System.out.println("Не удалось найти подходящий стол для компании.");
      }
   }

   public void seatCompanyVigodniyStol(int k) { // Метод для посадки компании за самый выгодный стол (с минимальными лишними местами)
      int dopMesta=0; // Лишние места
      int ii=0; // Индекс подходящего стола
      int w=0;  // Флаг, указывающий, был ли найден подходящий стол

      for (int i = 0; i < stoli.length; i++) {
         if(! stoli[i].getNotfree() && stoli[i].getVmestimost() >= k && w==0){
            dopMesta=stoli[i].vmestimost-k; // Подсчитываем лишние места
            ii=i; // Запоминаем индекс первого стола
            w++; // Устанавливаем флаг
         }
         else{
            if(! stoli[i].getNotfree() && stoli[i].getVmestimost() >= k && dopMesta>(stoli[i].vmestimost - k)){
               dopMesta=stoli[i].vmestimost-k; // Обновляем лишние места
               ii=i; // Обновляем индекс стола
            }
         }
      }

      if(w==0){
         System.out.println("Не удалось найти подходящий стол с минимальными лишними местами для компании из " + k + " человек.");
      }
      else{
         stoli[ii].zanat(); // Сажаем компанию за найденный стол
         System.out.println("Компания из " + k + " человек успешно посажена за стол с номером " + (ii + 1) + ". Лишние места: " + dopMesta);
      }
   }

   public void osvobozhdenieStola(int num) { // Метод для освобождения стола с номером num
      if (stoli.length > num - 1 && num > 0) {
         stoli[num - 1].notfree = false;  // Помечаем стол как свободный
         System.out.println("Стол " + num + " успешно освобожден.");
      } else {
         System.out.println("Не удалось освободить стол " + num + ".Такого стола не существует."); // Стол с таким номером не существует или передано некорректное значение
      }
   }

   public boolean seatCompanyNaNeskolkoStolov(int k) { // Метод для посадки компании за несколько соседних столов с суммарной вместимостью >= k
      int sum=0; // Сумма вместимости соседних столов
      int start=-1; // Старту присваиваем несуществующее значение

      for (int i = 0; i < stoli.length; i++) {
         if (! stoli[i].getNotfree()) { // Если стол свободен
            if (start == -1) {
               start = i; // Запоминаем индекс первого стола
               sum = stoli[i].getVmestimost(); // Добавляем вместимость стола
            } else {
               sum += stoli[i].getVmestimost(); // Добавляем вместимость следующего стола
            }


            if (sum >= k) { // Если нашли подходящую последовательность столов
               for (int j = start; j <= i; j++) {
                  stoli[j].zanat(); // Помечаем все столы в последовательности как занятые
               }
               System.out.println("Компания из " + k + " человек успешно посажена за несколько столов.");
               return true; // Разместили компанию. Конец!
            }
         } else { // Стол занят, следовательно, начинаем поиск заново
            start=-1; // Присваиваем переменной исходное значение
            sum=0; // Обнуляем сумматор
         }
      }

      System.out.println("Не удалось посадить компанию за несколько столов.");
      return false; // Нужная последовательность не найдена. Метод не применился.
   }

   public boolean seatCompanyVigodniyNeskolkoStolov(int k) { // Метод для посадки компании за несколько соседних столов с суммарной вместимостью >= k, минимальными лишними местами
      int start = -1; // Начало самой выгодной последовательности
      int end = -1;   // Конец самой выгодной последовательности
      int mDopMesta = 0; // Минимальное количество лишних мест
      int a = 0; // Флаг: найдена ли хоть одна подходящая последовательность


      // Перебираем все возможные начальные столы
      for (int i = 0; i < stoli.length; i++) {
         int sum = 0; // Сумма вместимости текущей последовательности

         // Проверяем непрерывную последовательность начиная с i
         for (int j = i; j < stoli.length; j++) {
            if (stoli[j].getNotfree()) {
               // Если встречаем занятый стол, текущая последовательность прерывается
               break; // Переходим к следующему начальному столу
            }

            sum += stoli[j].getVmestimost(); // Добавляем вместимость текущего стола

            if (sum >= k) { // Если текущая сумма вместимости достаточна
               int dopMesta = sum - k; // Подсчитываем лишние места

               if (a == 0 || dopMesta < mDopMesta) { // Если это первая подходящая последовательность или она выгоднее предыдущей
                  a++;
                  mDopMesta = dopMesta;
                  start = i; // Обновляем начало
                  end = j; // Обновляем конец
               }

               break; // Ищем новый стартовый стол
            }
         }
      }

      if (a == 0) {
         System.out.println("Не удалось найти подходящую последовательность столов с минимальными лишними местами.");
         return false; // Метод не применяется, если подходящей последовательности не найдено. Конец.
      }

      for (int i = start; i <= end; i++) { // Помечаем все столы в найденной самой выгодной последовательности как занятые
         stoli[i].zanat();
      }
      System.out.println("Компания из " + k + " человек успешно посажена за несколько столов с минимальными лишними местами.");
      return true; // Метод применился. Конец.
   }

}
